import streamlit as st
import pandas as pd
import plotly.express as px
from typing import List
import seaborn as sns

# ------------------------ PAGE CONFIG ----------------------------------
st.set_page_config(
    page_title="Analyse de forme",
    page_icon='ðŸ‡§ðŸ‡·',
    layout="wide"
)
st.title("Analyse de forme")

# ------------------------ DATA ----------------------------------
df = pd.read_excel("https://github.com/frimpong-adotri-01/datasets/blob/main/dataset.xlsx?raw=true")
cleaned_df = df[df.columns[(df.isna().sum()/df.shape[0]) < .9]]
boxplot_variables:List[str] = list(cleaned_df.select_dtypes(["float64"]).columns)
# ------------------------ CONTENT ----------------------------------
st.markdown("---")
st.markdown("### **PrÃ©sentation**")
st.markdown("Il s'agit d'une exploration en surface du dataset Ã  notre disposition. L'objectif est de prendre ses "
            "marques et se familiariser avec les diffÃ©rentes variables. Les principaux Ã©lÃ©ments qui s'en dÃ©gage sont :")
st.markdown("* **La variable Ã  expliquer** : <span style=\"color:blue\">\"**_SARS-Cov-2 exam result_**\"</span>"
            "\n* **Les dimensions du dataset** : <span style=\"color:blue\">_5644 lignes x 111 colonnes_</span>"
            "\n* **Proportion globale de valeurs manquantes** : <span style=\"color:blue\">551682 (97.75 %)</span>"
            "\n * **Nature des variables** : <span style=\"color:blue\">70 variables **_Â«float64Â»_** | 37 variables **_Â«objectÂ»_** | 4 variables **_Â«int64Â»_**</span> ", unsafe_allow_html=True)

st.markdown("---")
st.markdown("### Focus sur les valeurs manquantes...")

with st.container():
    st.markdown("La **_heatmap_** suivante permet de visualiser la proportion de valeurs manquantes par colonne" 
            "dans le dataset. En effet, on remarque que les valeurs manquantes sont de couleur **blanche** tandis"
            " que les valeurs existantes sont en <span style=\"color:blue\">**bleu**</span>.\n", unsafe_allow_html=True)
    na_fig = px.imshow(df, width=1100, height=850, color_continuous_scale='bluered')
    na_fig.layout.coloraxis.showscale = False  #remove the imshow colorbar
    na_fig.update_layout(title_text='NaN values repartition per features', #center figure title
                     title_x=.5,
                     font_family="Courier New",
                     font_color="black",
                     title_font_family="Arial",
                     title_font_color="red",  #title color
                     legend_title_font_color="green"   #legend color
                     )
    st.write(na_fig)

with st.container():
    st.markdown("Ã‰tant donnÃ©  le grand nombre de variables (111) Ã  notre disposition, il est primordial de nous"
                " dÃ©barasser des variables avec plus de 90% de valeurs manquantes. AprÃ¨s Ã©puration de ces variables, on passe "
                "de 111 variables Ã  39 variables. La **heatmap** de notre nouveau dataset ressemble Ã  ceci. Pour une meilleure"
                " comprÃ©hension, il faut savoir que les couleurs de la heatmap sont codÃ©es en octets. Le masque boolÃ©en sur "
                "lequel repose cette heatmap retourne **Â«1 si la valeur est une NaNÂ»** et **Â«0 sinonÂ»**. Les couleurs de la heatmap"
                " ne reprÃ©sentent que 2 valeurs opposÃ©es. Ainsi **0 = tous les"
                " Ã  tous les chiffres de l'octet sont nuls** et **255=tous les chiffres de l'octet sont Ã©gaux Ã  1.** "
                "Donc toutes les couleurs Ã©gales Ã  0 reprÃ©sentent des valeurs existantes et les couleurs Ã©gales Ã  255, les NaN values.", unsafe_allow_html=True)
    na_fig = px.imshow(cleaned_df.isna(), width=900, height=900, )
    na_fig.layout.coloraxis.showscale = True  #remove the imshow colorbar
    na_fig.update_layout(title_text='Dataset after cleaning features with a high rate of NaN values', #center figure title
                     title_x=.5,
                     font_family="Courier New",
                     font_color="black",
                     title_font_family="Arial",
                     title_font_color="red",  #title color
                     legend_title_font_color="green"   #legend color
                     )
    st.write(na_fig)

with st.container():
    st.markdown("---")
    st.markdown("### **Statistiques descriptives**")
    st.markdown(r'''Les premiÃ¨res statistiques de nos variables sont rÃ©vÃ©latrices. On peut remarquer de prime abord
                que les variables sont toutes standardisÃ©es ($\mu = 0$  et  $\sigma = 1$) mise Ã  part la variable
                **Â«Patient age quantileÂ» (qui sont potentiellement des catÃ©gories d'Ã¢ge)**, les variables 
                **Â«Mycoplasma pneumoniaeÂ»**, **Â«Partial thromboplastin time (PTT)Â»**, **Â«Urine-SugarÂ»**, 
                **Â«Prothrombin time (PT), ActivityÂ»** et **Â«D-DimerÂ» (qui ne possÃ¨dent que des valeurs manquantes)**
                 et la variable **Â«Fio2 (venous blood gas analysis)Â» (qui ne possÃ¨de qu'une seule valeur qui est 
                 Ã©gale Ã  0)**.''')
    st.write("La variable **Â«Patient age quantileÂ»** ")
    st.write("")
    st.markdown("<span style=\"color:red\">**Statistiques descriptives du dataset**</span>", unsafe_allow_html=True)
    st.dataframe(df.describe())
    st.write("")
    st.write(r'''Les **Â«boxplotsÂ»** nous permettent de visualiser la granularitÃ© de chacune de nos variables. 
    Globalement, les variables suivent une distribution relativement symÃ©trique. En effet, la ligne mÃ©diane est
    centrÃ©e, le plus souvent dans la boÃ®te Ã  moustache. Par ailleurs, Les variables sont faiblement dispersÃ©es, ceci
     Ã©tant dÃ» Ã  la faible longueur des boÃ®tes Ã  moustache.''')
    st.markdown("Bien Ã©videmment, quelques variables sont des exceptions. C'est le cas de la variable **Â«EosinophilsÂ»** "
             "n'a pas du tout une distribution symÃ©trique.")
    st.write("Pour finir, on peut remarquer que toutes les variables possÃ¨dent un nombre relativement important de "
             "valeurs extrÃªmes. Certaines variables comme **Â«BasophilsÂ»** ont des valeurs fortements extrÃªmes **(11.078 pour un 3e IQ de -0.387)**. ")
    box_fig = px.box(cleaned_df, y=boxplot_variables, notched=True)
    box_fig.update_layout(title_text='Numerical variables boxplot vizualisation', #center figure title
                     title_x=.5,
                     font_family="Courier New",
                      width=850,
                      height=850,
                     font_color="black",
                     title_font_family="Arial",
                     title_font_color="red",  #title color
                     legend_title_font_color="green"   #legend color
                     )
    st.write(box_fig)

with st.container():
    st.markdown("---")
    st.markdown("### **Mon code Python**")
    code:str = '''
# DESCRIPTIVE ANALYSIS PYTHON CODE
    
# PYTHON MODULES
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns

df:pd.DataFrame = pd.read_excel("https://github.com/frimpong-adotri-01/datasets/blob/main/dataset.xlsx?raw=true")
# DISPLAY THE DATASET
print(df)

# NaN values rate and cleaning
print(f"NaN values rate = {df.isna().sum().sum()/df.shape[0]}")
na_fig = px.imshow(df, width=1000, height=750, title='NaN values repartition per features')
na_fig.show()
print((df.isna().sum()/df.shape[0]).sort_values(ascending=True))
cleaned_df:pd.DataFrame = df[df.columns[(df.isna().sum()/df.shape[0]) < .9]]
print(cleaned_df)

# first statistics
print(df.describe())
    '''
    st.code(code, language='Python')



